============================================================================
                        CAMPUSCONNECT BACKEND API DOCUMENTATION
                                   API v1 Reference
============================================================================

BASE URL: /api/v1

Scope: This file documents all routers under backend/api/v1 (auth, client, admin) based on actual code.

============================================================================
1) AUTHENTICATION (/api/v1/auth)
============================================================================
• GET  /admin/status — Auth state for admins. Access: any (returns authenticated:false if not logged in).
• POST /admin/login — Admin login. Body: { username, password, remember_me }. Sets tokens/cookies if available.
• POST /admin/logout — Admin logout. Clears session/tokens.

• GET  /student/status — Auth state for students.
• POST /student/login — Student login. Body: { enrollment_no, password, remember_me }.
• POST /student/logout — Student logout.
• POST /student/register — Student registration. Body includes: full_name, enrollment_no, email, mobile_no, gender, date_of_birth(YYYY-MM-DD), department, semester(int), password.

• GET  /faculty/status — Auth state for faculty (session-based data).
• POST /faculty/login — Faculty login. Body: { employee_id, password, remember_me }.
• POST /faculty/logout — Faculty logout.
• POST /faculty/register — Faculty registration. Body includes: employee_id, full_name, email, contact_no, department, designation, qualification, specialization?, experience_years, seating?, gender, date_of_birth, date_of_joining?, employment_type?, password.

Password Reset (mounted under /auth)
• POST /forgot-password/student — Start student reset flow. Body: { enrollment_no, email }.
• POST /forgot-password/faculty — Start faculty reset flow. Body: { employee_id, email }.
• GET  /validate-reset-token/{token} — Validate reset token.
• POST /reset-password/{token} — Reset password. Body: { new_password }.

Notes:
- Token cookies set when Redis/token manager is available; session fallback otherwise.
- Validation and error responses are JSON with success/message fields.

============================================================================
2) CLIENT (/api/v1/client)
============================================================================
Attendance (/attendance)
• GET  /status/{event_id} — Attendance status for current student. Auth: student.
• POST /mark/{event_id} — Mark attendance. Auth: student. Body: { registration_id, student_name, enrollment_no }.
• GET  /validate-form/{event_id} — Prefill/validate form. Auth: student.
• GET  /history — Attendance history. Auth: student.

Certificates (/certificates)
• POST /data — Get data for JS certificate generator. Auth: student. Body: { event_id, enrollment_no } (must match session).
• POST /send-email — Queue email with provided PDF. Auth: student. Body: { event_id, enrollment_no, pdf_base64, file_name }.
• GET  /status/{event_id} — Check certificate availability. Auth: student.
• GET  /template/{event_id} — Get certificate template content/placeholders. Auth: student.
• POST /validate-access — Validate eligibility. Auth: student. Body: { event_id }.
• GET  /debug/{event_id}/{enrollment_no} — Debug data (only when DEBUG enabled).

Events (/events)
• GET  /list — Paginated events with filters. Query: status=all|upcoming|ongoing|completed, category?, page=1, limit=10, force_refresh?. Auth: optional (filters by target audience when logged in).
• GET  /details/{event_id} — Event details (adds user_registration_status when logged in).
• GET  /categories — Unique event categories.
• GET  /search — Query search across name/description/category. Query: q(required), status, category, page, limit.
• GET  /upcoming — Quick upcoming events. Query: limit.

Feedback (/feedback)
• GET  /status/{event_id} — Can submit feedback? Requires attendance. Auth: student.
• POST /submit/{event_id} — Submit feedback. Auth: student. Body includes rating fields.
• GET  /form-data/{event_id} — Prefill feedback form. Auth: student.
• GET  /history — Feedback history. Auth: student.
• GET  /analytics/{event_id} — Aggregated feedback summary (basic). Auth: student with attendance.

Profile (/profile)
• GET  /info — Current student profile. Auth: student.
• PUT  /update — Update student profile. Auth: student. Body: subset of profile fields; null allowed for avatar_url.
• GET  /dashboard-stats — Personal metrics. Auth: student.
• GET  /event-history — Participation history. Auth: student.
• POST /change-password — Change student password. Auth: student. Body: { current_password, new_password, confirm_password }.
• GET  /faculty/info — Current faculty profile. Auth: faculty.
• PUT  /faculty/update — Update faculty profile (optional password change). Auth: faculty.
• GET  /faculty/dashboard-stats — Faculty metrics. Auth: faculty.
• GET  /team-details/{event_id}/{team_id} — Team member info (student auth). Auth: student.
• GET  /team-info/{event_id}/{team_id} — Team info (auth optional; attempts student context).
• GET  /team-info-debug/{event_id}/{team_id} — Team info (debug, no auth).
• GET  /test-auth — Simple student auth check.

Registration (/registration)
• POST /register/{event_id} — Register for event. Auth: student. Handles individual and team (generates IDs).
• GET  /validate — Validate own registration ID. Auth: student. Query: registration_id, event_id.
• GET  /validate-participant — Validate student by enrollment_no (for teams).
• GET  /validate-faculty-participant — Validate faculty by employee_id (for teams with faculty?).
• POST /check-conflicts — Check if enrollment_nos already registered. Body: { event_id, enrollment_numbers[] }.
• POST /check-enhanced-conflicts — Same with approval support; may return pending_approvals.
• POST /send-team-approval-request — Team leader requests approval. Auth: student.
• POST /respond-team-approval — Respond approve/reject. Auth: student.
• GET  /pending-team-requests — List pending requests. Auth: student.
• GET  /status/{event_id} — Registration status with team details. Auth: student.
• POST /cancel/{event_id} — Cancel registration (varies by type/time). Auth: student.
• POST /add-team-member — Add member by leader with DB consistency. Auth: student.
• POST /remove-team-member — Remove member by leader with cleanup. Auth: student.
• POST /add-team-member-fixed — Alternate add (team_management_fixed). Auth: student.
• POST /remove-team-member-fixed — Alternate remove (team_management_fixed). Auth: student.
• GET  /validate-team-data/{event_id} — Team data consistency report. Auth: student.

============================================================================
3) ADMIN (/api/v1/admin)
============================================================================
Analytics (/analytics)
• GET  /dashboard — Overview counts, recent activity, status distribution, monthly trends. Auth: admin.
• GET  /events — Events analytics with distributions and popular events. Auth: admin (EVENT_ADMIN scoped by assigned_events).
• GET  /students — Department/semester distribution, engagement metrics, top students. Auth: admin.
• GET  /registrations — Trends over period days (7/30/90/365). Auth: admin.
• GET  /certificates — Issuance analytics and rates. Auth: admin.
• GET  /export — Export analytics. Query: report_type, format. Auth: super-admin.
• GET  /dashboard-stats — Real-time dashboard stats mirroring dashboard.py. Auth: admin.

Certificates (/certificates)
• GET  /list — List certificates (filters supported). Auth: admin.
• GET  /event/{event_id} — Event certificate info. Auth: admin.
• POST /bulk-issue — Bulk issue. Auth: executive or higher.
• POST /revoke/{certificate_id} — Revoke certificate. Auth: executive or higher.
• GET  /templates — Templates listing. Auth: admin.
• GET  /statistics — Issuance stats. Auth: admin.

Certificate Templates (/certificate-templates)
• GET  /dashboard — Template dashboard. Auth: admin.
• GET  /statistics — Template stats. Auth: admin.
• POST /upload — Upload HTML template. Auth: admin.
• DELETE /{template_id} — Delete template. Auth: admin.
• GET  /{template_id}/preview — Preview template. Auth: admin.
• POST /migrate — Migrate legacy templates. Auth: admin.

Events (/events) — Very large module; highlights only
• POST /create — Create event. Auth: executive or higher.
• PUT  /update/{event_id} — Update event. Auth: admin with access.
• GET  /list — Admin list with filters. Auth: admin.
• GET  /pending-approval — List pending approval. Auth: admin.
• POST /approve/{event_id} — Approve event. Auth: executive or higher.
• POST /decline/{event_id} — Decline event. Auth: executive or higher.
• GET  /details/{event_id} — Event details with admin metrics. Auth: admin.
• GET  /stats — Stats (by event_id query). Auth: admin.
• DELETE /delete/{event_id} — Delete event. Auth: executive or higher.
• GET  /registrations/{event_id} — Registrations. Auth: admin with access.
• POST /bulk-update-status — Bulk status update. Auth: executive or higher.
• GET  /attendance/{event_id} — Attendance overview. Auth: admin.
• POST /export/{event_id} — Export data. Auth: admin.
• GET  /debug-event/{event_id} — Debug. Auth: admin.
• POST /trigger-pending-notifications — Trigger pending notifications. Note: appears twice in code (duplication).
• Events/faculty_organizers:
  - GET /faculty-organizers — Queryable list. Auth: admin.
  - GET /faculty-organizers/{employee_id} — Details. Auth: admin.

Event Registration (/event-registration)
• GET  /event/{event_id} — Registrations with filters/pagination. Auth: admin.
• PATCH /attendance/physical/{registration_id} — Mark physical attendance. Auth: admin.
• POST /attendance/physical/bulk — Bulk physical attendance. Auth: admin.
• GET  /attendance/stats/{event_id} — Attendance stats. Auth: admin.
• GET  /lookup/{student_enrollment}/{event_id} — Lookup a registration. Auth: admin.
• POST /attendance/virtual — Mark virtual attendance. Auth: admin.

Notifications (/notifications)
• POST / — Create notification. Auth: admin.
• GET  / — List notifications. Auth: admin.
• GET  /unread — List unread. Auth: admin.
• POST /mark-read — Mark many as read. Auth: admin.
• POST /{notification_id}/mark-read — Mark one as read. Auth: admin.
• POST /{notification_id}/action — Take action on notification. Auth: admin.
• DELETE /{notification_id} — Delete. Auth: admin.
• GET  /stats — Notification stats. Auth: admin.

Audit Logs (/audit-logs)
• GET  / — Get logs with filters. Auth: admin.
• GET  /{admin_username} — Logs by admin. Auth: admin.
• GET  /stats/overview — Overview stats. Auth: admin.
• DELETE /cleanup — Cleanup logs. Auth: super-admin.
• GET  /actions/types — Action types. Auth: admin.
• GET  /severities/types — Severity types. Auth: admin.
• GET  /recent/summary — Recent summary. Auth: admin.

Students (/students)
• GET  /list — Paginated list with filters. Auth: content admin or higher.
• GET  /details/{enrollment_no} — Student details. Auth: content admin or higher.
• PUT  /update/{enrollment_no} — Update student. Auth: content admin or higher.
• POST /create — Create student. Auth: content admin or higher.
• POST /bulk-import — Bulk import. Auth: content admin or higher.
• GET  /statistics — Student stats. Auth: content admin or higher.
• PUT  /toggle-status/{enrollment_no} — Enable/disable. Auth: content admin or higher.
• PUT  /update-status/{student_id} — Update status. Auth: content admin or higher.

Users (/users) — Admin management (mounted also as /admin-users)
• GET  /list — List admin users. Auth: super-admin.
• GET  /details/{username} — Admin details. Auth: super-admin.
• POST /create — Create admin. Auth: super-admin.
• PUT  /update/{username} — Update admin. Auth: super-admin.
• DELETE /delete/{username} — Delete admin. Auth: super-admin.
• POST /assign-events/{username} — Assign events to event admin. Auth: super-admin.
• PUT  /toggle-status/{username} — Enable/disable admin user. Auth: super-admin.
• GET  /roles — List roles. Auth: admin.
• GET  /statistics — Admin metrics. Auth: super-admin.

Faculty (/faculty)
• GET  /list — Paginated list. Auth: admin.
• GET  /details/{employee_id} — Faculty details. Auth: admin.
• POST /create — Create faculty. Auth: admin.
• PUT  /update/{employee_id} — Update faculty. Auth: admin.
• DELETE /delete/{employee_id} — Delete faculty. Auth: admin.
• GET  /statistics — Faculty stats. Auth: admin.
• PUT  /toggle-status/{employee_id} — Enable/disable faculty. Auth: admin.
• POST /bulk-import — Bulk import. Auth: admin.
• PUT  /update-status/{faculty_id} — Update status. Auth: admin.

Assets (/assets)
• GET  /dashboard — Assets dashboard. Auth: admin.
• GET  /statistics — Assets stats. Auth: admin.
• POST /upload — Upload asset. Auth: admin.
• DELETE /{asset_id} — Delete asset. Auth: admin.

Profile (/profile)
• GET  /data — Admin profile. Auth: admin.
• PUT  /update — Update profile. Auth: admin.
• PUT  /update-username — Change username. Auth: admin.
• PUT  /update-password — Change password. Auth: admin.
• PUT  /update-settings — Change settings. Auth: admin.

Venues (/venues)
• GET  / — List active venues. Auth: admin.
• GET  /all — List all venues (includes inactive). Auth: admin (some endpoints may require higher role).
• GET  /{venue_id} — Venue details. Auth: admin.
• POST / — Create venue. Auth: admin.
• PUT  /{venue_id} — Update venue. Auth: admin.
• DELETE /{venue_id} — Soft delete. Auth: admin.
• POST /{venue_id}/restore — Restore soft-deleted venue. Auth: admin.
• DELETE /{venue_id}/permanent — Permanent delete. Auth: super-admin.

============================================================================
4) AUTHZ & ROLES (summary)
============================================================================
- Admin roles (AdminRole): SUPER_ADMIN > EXECUTIVE_ADMIN > EVENT_ADMIN > CONTENT_ADMIN.
- Dependencies used: require_admin, require_super_admin_access, require_executive_admin_or_higher, require_student_login, require_faculty_login, get_current_student(_optional), get_current_user.
- Event Admins are scoped to assigned_events for relevant endpoints.

============================================================================
5) NOTABLE NOTES / ANOMALIES
============================================================================
- Admin events module defines /trigger-pending-notifications twice (possible duplication).
- Client team info debug endpoints exist without auth; intended for development.
- Certificates client router is present and functional; DEBUG-gated debug endpoint.

Generated on: 2025-08-08
API Version: v1 (code-derived)
Status: Up-to-date with backend/api/v1 source
